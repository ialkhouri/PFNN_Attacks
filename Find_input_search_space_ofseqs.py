# import blosum
#
# matrix_B = blosum.main()

from PFNN_attacks_Functions import BLOSUM62_distance_score
import random
import string
import pickle
import numpy as np



##################################################################
#################################
#################################
## Finding space of sequences by which the hamming distance is less than or equal to 5 and the BLOSUM distance is equal or less than 20
#################################
##################################################################
#################################
####### The input here is one sequence and the goal is to obtain samples in the space defined above


############## JHA sequencies

# PDB_2QJF_fastas = "LQERDIVPVDASYEVKELYVPENKLHLAKTDAETLPALKINKVDMQWVQVLAEGWATPLNGFMREREYLQCLHFDCLLDGGVINLSVPIVLTATHEDKERLDGCTAFALMYEGRRVAILRNPEFFEHRKEERCARQWGTTCKNHPYIKMVMEQGDWLIGGDLQVLDRVYWNDGLDQYRLTPTELKQKFKDMNADAVFAFQLRNPVHNGHALLMQDTHKQLLERGYRRPVLLLHPLGGWTKDDDVPLMWRMKQHAAVLEEGVLNPETTVVAIFPSPMMYAGPTEVQWHCRARMVAGANFYIVGRDPAGMPHPETGKDLYEPSHGAKVLTMAPGLITLEIVPFRVAAYNKKKKRMDYYDSEHHEDFEFISGTRMRKLAREGQKPPEGFMAPKAWTVLTEYYKSLEKA"
# PDB_2BBJ = "GSHMEEKRLSAKKGLPPGTLVYTGKYREDFEIEVMNYSIEEFREFKTTDVESVLPFRDSSTPTWINITGIHRTDVVQRVGEFFGIHPLVLEDILNVHQRPKVEFFENYVFIVLKMFTYDKNLHELESEQVSLILTKNCVLMFQEKIGDVFDPVRERIRYNRGIIRKKRADYLLYSLIDALVDDYFVLLEKIDDEIDVLEEEVLERPEKETVQRTHQLKRNLVELRKTIWPLREVLSSLYRDVPPLIEKETVPYFRDVYDHTIQIADTVETFRDIVSGLLDVYLSSVSNKTNEVMKVLTIIATIFMPLTFIAGIYGMNFEYMPELRWKWGYPVVLAVMGVIAVIMVVYFKKKKWL"
# PDB_2QK4  = "MHHHHHHSSGVDLGTENLYFQSMAARVLIIGSGGREHTLAWKLAQSHHVKQVLVAPGNAGTACSEKISNTAISISDHTALAQFCKEKKIEFVVVGPEAPLAAGIVGNLRSAGVQCFGPTAEAAQLESSKRFAKEFMDRHGIPTAQWKAFTKPEEACSFILSADFPALVVKASGLAAGKGVIVAKSKEEACKAVQEIMQEKAFGAAGETIVIEELLDGEEVSCLCFTDGKTVAPMPPAQDHKRLLEGDGGPNTGGMGAYCPAPQVSNDLLLKIKDTVLQRTVDGMQQEGTPYTGILYAGIMLTKNGPKVLEFNCRFGDPECQVILPLLKSDLYEVIQSTLDGLLCTSLPVWLENHTALTVVMASKGYPGDYTKGVEITGFPEAQALGLEVFHAGTALKNGKVVTHGGRVLAVTAIRENLISALEEAKKGLAAIKFEGAIYRKDIGFRAIAFLQ"
# PDB_2ROP = "SANQNFNNSETLGHQGSHVVTLQLRIDGMHCKSCVLNIEENIGQLLGVQSIQVSLENKTAQVKYDPSCTSPVALQRAIEALPPGNFKVSLPDGAEGSGTDHRSSSSHSPGSPPRNQVQGTCSTTLIAIAGMTCASCVHSIEGMISQLEGVQQISVSLAEGTATVLYNPAVISPEELRAAIEDMGFEASVVSESCSTNPLGNH"
# PDB_6NT3 = "WSHPQFEKGGGSGGGSGGSAWSHPQFEKGGSGGDYKDDDDKGGSGGDYKDDDDKMADNSPLIREERQRLFRPYTRAMLTAPSAQPAKENGKTEENKDNSRDKGRGANKDRDGSAHPDQALEQGSRLPARMRNIFPAELASTPLEDFDPFYKNKKTFVVVTKAGDIFRFSGEKSLWMLDPFTPIRRVAISTMVQPIFSYFIMITILIHCIFMIMPATQTTYILELVFLSIYTIEVVVKVLARGFILHPFAYLRDPWNWLDFLVTLIGYITLVVDLGHLYALRAFRVLRSWRTVTIVPGWRTIVDALSLSITSLKDLVLLLLFSLSVFALIGLQLFMGNLKHKCVKHFPADGSWGNFTDERWFNYTSNSSHWYIPDDWIEYPLCGNSSGAGMCPPGYTCLQGYGGNPNYGYTSFDTFGWAFLSVFRLVTLDYWEDLYQLALRSAGPWHILFFIIVVFYGTFCFLNFILAVVVMSYTHMVKRADEEKAAERELKKEKKAASVANNTANGQEQTTIEMNGDEAVVIDNNDQAARQQSDPETPAPSVTQRLTDFLCVWDCCVPWQKLQGAIGAVVLSPFFELFIAVIIVLNITFMALDHHDMNIEFERILRTGNYIFTSIYIVEAVLKIIALSPKFYFKDSWNVFDFIIVVFAILELGLEGVQGLSVFRSFRLLRVFRLAKFWPTLNNFMSVMTKSYGAFVNVMYVMFLLLFIFAIIGMQLFGMNYIDNMERFPDGDLPRWNFTDFLHSFMIVFRALCGEWIESMWDCMLVGDWSCIPFFVAVFFVGNLVILNLLIALLLNNYGSFCTSPTSDEEDSKDEDALAQIVRIFKRFKPNLNAVKLSPMKPDSEDIVESQEIQGNNIADAEDVLAGEFPPDCCCNAFYKCFPSRPARDSSVQRMWSNIRRVCFLLAKNKYFQKFVTAVLVITSVLLALEDIYLPQRPVLVNITLYVDYVLTAFFVIEMIIMLFAVGFKKYFTSKWYWLDFIVVVAYLLNFVLMCAGIEALQTLRLLRVFRLFRPLSKVNGMQVVTSTLVEAVPHIFNVILVGIFFWLVFAIMGVQLFAGKFYKCVDENSTVLSHEITMDRNDCLHENYTWENSPMNFDHVGNAYLSLLQVATFKGWLQIMNDAIDSREVHKQPIRETNIYMYLYFIFFIVFGSFFILKLFVCILIDIFRQQRRKAEGLSATDSRTQLIYRRAVMRTMSAKPVKRIPKPGNKIQGCIFDLVTNQAFDISIMVLICLNMVTMMVEKEGQSQHMTEVLYWINVVFIILFTGECVLKLISLRHYYFTVGWNIFDFVVVIISIVGMFLADLIETYFVSPTLFRVIRLARIGRILRLVKGAKGIRLLLLALRKALRTLFNVSFLLFVIMFVYAVFGMEFFMHIRDAGAIDDVYNFKTFGQSIILLFQLATSAGWDGVYFAIANEEDCRAPDHELGYPGNCGSRALGIAYLVSYLIITCLVVINMYAAVILDYVLEVYEDSKEGLTDDDYDMFFEVWQQFDPEATQYIRYDQLSELLEALQPPLQVQKPNKYKILSMNIPICKDDHIFYKDVLEALVKDVFSRRG"
# PDB_6NT5 = "MPHSSLHPSIPCPRGHGAQKAALVLLSACLVTLWGLGEPPEHTLRYLVLHLASLQLGLLLNGVCSLAEELRHIHSRYRGSYWRTVRACLGCPLRRGALLLLSIYFYYSLPNAVGPPFTWMLALLGLSQALNILLGLKGLAPAEISAVCEKGNFNVAHGLAWSYYIGYLRLILPELQARIRTYNQHYNNLLRGAVSQRLYILLPLDCGVPDNLSMADPNIRFLDKLPQQTGDRAGIKDRVYSNSIYELLENGQRAGTCVLEYATPLQTLFAMSQYSQAGFSREDRLEQAKLFCRTLEDILADAPESQNNCRLIAYQEPADDSSFSLSQEVLRHLRQEEKEEVTVGSLKTSAVPSTSTMSQEPELLISGMEKPLPLRTDFSLEVLFQ"
# PDB_6O77 = "GAMGSRHRRNGNFESSRLLYSSMSRSIDVACSDADLANFIQENFKKRECVFFTKDTKSMGNLCKCGYPENQHIEGTQVNTTEKWNYKKHTKELPTDAFGDIQFENLGKRGKYIRLSCDTDSETLYDLMTQHWHLKTPNLVISVTGGAKNFALKPRMRKIFSRLIYIAQSKGAWIFTGGTHYGLMKYIGEVVRDNTISRSSEENVVAIGIAAWGMISNRETLIRTADSDGSFLARYIMDDLKRDPLYCLDNNHTHLLLVDNGTHGHPTTEAKVRTQLEKYISERVIPESNYGGKIPIVCFAQGGGKETLKSINVAIKSKIPCVVVEGSGRIADVIASLVEAEGTLASSCVKESLLRFLPRTISRLSEEETESWIKWIKEVLESPHLLTVIKIEEAGDEIVSNAISFALYKAFSTNEHDRDNWNGQLKLLLEWNQLDLASDEIFTNDRNWESADLQDVMFTALVKDRPKFVRLFLENGLNLRKFLTTEVLRELYTNNFSSLVFKNLQIAKNSYNDALLTFVWKMVEDFRRGFKRDYKNSKDEMEIQLSEECPITRHPLQALFIWSVLQNKKELSKVIWEQTRGCTLAALGASKLLKSMAKVKNDINAAGESEELANEYETRAVELFTECYSNDEDLAEQLLTYSCEAWGGSNCLELAVEARDQQFIAQPGVQNFLSKQWYGEISRDTKNWKIIMCLFFFPLIGCGFISFRKKPVEKSKKLFLYYVSFFTSPFVVFSWNVIFYIAFLLLFAYVLLMDFQKEPTALEIILYVLVFVLLCDEVRQWYMNGSKYFSDLWNVMDTLAIFYFIAGIVFRLHSDESSWYSGRVIFCLDYIVFTLRLIHIFTVSRNLGPKIIMLQRMMIDVFFFLFLFAVWMVAFGVARQGILRKNEHRWEWIFRSVIYEPYLAMFGQYPDDIDGTTYNFDRCTFSGNESKPLCVELDANNQPRFPEWITIPLVCIYMLSTNILLVNLLVAMFGYTVGSVQENNDQVWKFQRFFLVQEYCSRLTIPFPFVIFAYIFMVMRKCFKCCCNKESKEPSICCSRNEDNEILAWEAVMKENYLVKINTKANDSSEEMVHRFRQLDAKLSDLKGLLKEISSKIK"
# PDB_6OEU = "MASAGNAAEPQDRGGGGSGCIGAPGRPAGGGRRRRTGGLRRAAAPDRDYLHRPSYCDAAFALEQISKGKATGRKAPLWLRAKFQRLLFKLGCYIQKNCGKFLVVGLLIFGAFAVGLKAANLETNVEELWVEVGGRVSRELNYTRQKIGEEAMFNPQLMIQTPKEEGANVLTTEALLQHLDSALQASRVHVYMYNRQWKLEHLCYKSGELITETGYMDQIIEYLYPCLIITPLDCFWEGAKLQSGTAYLLGKPPLRWTNFDPLEFLEELKKINYQVDSWEEMLNKAEVGHGYMDRPCLNPADPDCPATAPNKNSTKPLDMALVLNGGCHGLSRKYMHWQEELIVGGTVKNSTGKLVSAHALQTMFQLMTPKQMYEHFKGYEYVSHINWNEDKAAAILEAWQRTYVEVVHQSVAQNSTQKVLSFTTTTLDDILKSFSDVSVIRVASGYLLMLAYACLTMLRWDCSKSQGAVGLAGVLLVALSVAAGLGLCSLIGISFNAATTQVLPFLALGVGVDDVFLLAHAFSETGQNKRIPFEDRTGECLKRTGASVALTSISNVTAFFMAALIPIPALRAFSLQAAVVVVFNFAMVLLIFPAILSMDLYRREDRRLDIFCCFTSPCVSRVIQVEPQAYTDTHDNTRYSPPPPYSSHSFAHETQITMQSTVQLRTEYDPHTHVYYTTAEPRSEISVQPVTVTQDTLSCQSPESTSSTRDLLSQFSDSSLHCLEPPCTKWTLSSFAEKHYAPFLLKPKAKVVVIFLFLGLLGVSLYGTTRVRDGLDLTDIVPRETREYDFIAAQFKYFSFYNMYIVTQKADYPNIQHLLYDLHRSFSNVKYVMLEENKQLPKMWLHYFRDWLQGLQDAFDSDWETGKIMPNNYKNGSDDGVLAYKLLVQTGSRDKPIDISQLTKQRLVDADGIINPSAFYIYLTAWVSNDPVAYAASQANIRPHRPEWVHDKADYMPETRLRIPAAEPIEYAQFPFYLNGLRDTSDFVEAIEKVRTICSNYTSLGLSSYPNGYPFLFWEQYIGLRHWLLLFISVVLACTFLVCAVFLLNPWTAGIIVMVLALMTVELFGMMGLIGIKLSAVPVVILIASVGIGVEFTVHVALAFLTAIGDKNRRAVLALEHMFAPVLDGAVSTLLGVLMLAGSEFDFIVRYFFAVLAILTILGVLNGLVLLPVLLSFFGPYPEVSPANGLNRLPTPSPEPPPSVVRFAMPPGHTHSGSDSSDSEYSSQTTVSGLSEELRHYEAQQGAGGPAHQVIVEATENPVFAHSTVVHPESRHHPPSNPRQQPHLDSGSLPPGRQGQQPRRDPPREGLWPPPYRPRRDAFEISTEGHSGPSNRARWGPRGARSHNPRNPASTAMGSSVPGYCQPITTVTASASVTVAVHPPPVPGPGRNPRGGLCPGYPETDHGLFEDPHVPFHVRCERRDSKVEVIELQDVECEERPRGSSSNDYKDDDDK"
#
# YEAST_SFP1 = "ATGGATTTTACAACAATGACTATGGCAAGCAATATGGCTACTAGTACTACTACGACGGCTACATCGGCACATGCATCTATAAATTCGTCATCAAACTTTAATATTGATATTGATTCGAACCAGAATACTCCTTCCATTTTGATAAATAACAATTCGGATTCTTCTAATGGAAAAAACACAGATTTTAACGGCGTCAATAATATTCACCAAAAAAATATCATGAATAATACAAATAATGTTCATTTGTACTCTCCAAATATAATGGACCAAACGCTACTAACTCCACAGGACATTGCCAAGTTACGGAGAGAATCAATAGCCCATTCTCAAGGGATGGGTGGTGTTTCATGGGGATCCATTAGTGTTGGTTCTTGGTTAAGAGATGAAATTATTAGCCGTAGAAATAGTATTGTACCTGCATCAGCAAACGGTGCTGCCTCCGCTGCCGCTTCTGCAACCACTACTGCCACTAATACTTTGCAGATTCAACAACCAACTAAGAGACCCTCTGTTAGTAATCCGCCTTACCATAGAGGGTATTCTATTTCTCCTCAGATAGCCTACACTGCTTATCTGCCAAATCTAGAAAAGCAATATTGTAAAGATTATTCATGCTGTGGTCTTTCCTTACCAGGTTTGCATGATTTGCTGAGACATTACGAAGAAGCTCATATATCCACGTCTCCTAACACTACCAATATGTCACAAATACCGATGAACTCTGCTGGTAACACTAGTTCATCAGTTCGTATGACAAATAATACCTCTTCTGCCAACTATAACCTGCAGAATAACATGGCCGCTAATACAAAAAATGCAGGTCATAAGACTAATACTATGCAGGCTCATAGCAGCAATGCAACTAATAACACCTCCATTAATAATATGCATGCCAATCTTCAGAGCAACATGGATTCCAACTCCACAATACGACAATCTCAGCATCCTCACCATCAGCAGAATATAATACAACAACAGTTGCAATCGAATTCTGTAAATCATACATCAGGGGCTGTACCCACACCGAGTGTAATGGGTTCAGCAACTGCGTCGTCCACAACTGCAAATCCAAATGTGATATCTATAACGGGTGCCCCCAACTCGGGCTTATCTATGGCTAATCACTCTCAACAACTACATCTGAATGGTAATCTAGTCGATGCCGTTTCAACGAATGATGTGTTTTTAAGAACGAGCAATTCTCCATCAAGACACGTTCCGCACAATAAACAAATTAACAGTAACAATAATAGTGGTATCAATATCAATAATAATACCTCACACAATTCTAATATTAACATGGGTAGTAAAAACGCCATGGTGAATCGTCCACATACTTTTAATAACTATTCCTTGAACAAAACGTCCAGGAATCCTATTCAACATCAATCAAGAAAAATTGATCCTCATCAAACCGATTTATCACCTCTGGTACTTGTCCAAGATATAGATTTAAGTTTTATGGATGATGATATTTTGGGCCCTAGTAACCACAATTCCATGAACTCTGTCGTAAATCCAACTACAGGTTCTCACAACTACAATACTTTTCATTCTTCCGTACACGCAAAATCTTCTCAAAACATGGTCGAGGATCAAGACATTGATGACATTGATGATGACGATGATGTTGATGATGACGATGACGATGACGATGACGATGACACAGAAAATGGCTCCAGTTCCAATGGAAAATCAGTTCATAACAACAATTACAAGATGCCTCAGCAAGCTTATATAGACGATCCTGCGAGAAGGCTCTATGTAATGGATCATGAGGAACAAAAACCCTTTAAGTGTCCAGTTATTGGTTGTGAAAAGACTTATAAAAACCAAAACGGTTTGAAGTACCATAGGTTGCACGGACATCAGAATCAAAAATTACATGAAAACCCTGACGGTACATTTAGCGTAATAGATCCAGATTCGACAGATTCTTTTGGTGATGGAATGGGCTCTGCAAAGGATAAACCATACCGTTGTGAAGTTTGTGGTAAGAGATATAAGAACTTGAACGGTTTAAAATATCACAGGGGCCACTCCACTCACTAA"
#
#
# COVID19_P07711 = "MNPTLILAAFCLGIASATLTFDHSLEAQWTKWKAMHNRLYGMNEEGWRRAVWEKNMKMIELHNQEYREGKHSFTMAMNAFGDMTSEEFRQVMNGFQNRKPRKGKVFQEPLFYEAPRSVDWREKGYVTPVKNQGQCGSCWAFSATGALEGQMFRKTGRLISLSEQNLVDCSGPQGNEGCNGGLMDYAFQYVQDNGGLDSEESYPYEATEESCKYNPKYSVANDTGFVDIPKQEKALMKAVATVGPISVAIDAGHESFLFYKEGIYFEPDCSSEDMDHGVLVVGYGFESTESDNNKYWLVKNSWGEEWGMGGYVKMAKDRRNHCGIASAASYPTV"
#
# COVID19_P59632 = "MDLFMRFFTLGSITAQPVKIDNASPASTVHATATIPLQASLPFGWLVIGVAFLAVFQSATKIIALNKRWQLALYKGFQFICNLLLLFVTIYSHLLLVAAGMEAQFLYLYALIYFLQCINACRIIMRCWLCWKCKSKNPLLYDANYFVCWHTHNYDYCIPYNSVTDTIVVTEGDGISTPKLKEDYQIGGYSEDRHSGVKDYVVVHGYFTEVYYQLESTQITTDTGIENATFFIFNKLVKDPPNVQIHTIDGSSGVANPAMDPIYDEPTTTTSVPL"


COVID19_P08887 = "MLAVGCALLAALLAAPGAALAPRRCPAQEVARGVLTSLPGDSVTLTCPGVEPEDNATVHWVLRKPAAGSHPSRWAGMGRRLLLRSVQLHDSGNYSCYRAGRPAGTVHLLVDVPPEEPQLSCFRKSPLSNVVCEWGPRSTPSLTTKAVLLVRKFQNSPAEDFQEPCQYSQESQKFSCQLAVPEGDSSFYIVSMCVASSVGSKFSKTQTFQGCGILQPDPPANITVTAVARNPRWLSVTWQDPHSWNSSFYRLRFELRYRAERSKTFTTWMVKDLQHHCVIHDAWSGLRHVVQLRAQEEFGQGEWSEWSPEAMGTPWTESRSPPAENEVSTPMQALTTNKDDDNILFRDSANATSLPVQDSSSVPLPTFLVAGGSLAFGTLLCIAIVLRFKKTWKLRALKEGKTSMHPPYSLGQLVPERPRPTPVLVPLISPPVSPSSLGSDNTSSHNRPDARDPRSPYDISNTDYFFPR"


text_file = open("COVID19_sequences_with_Adv_T20/COVID19_P08887.txt", "w")
text_file.write(COVID19_P08887+"\n")
SEQUENCE = COVID19_P08887


HAMMING_threshod = 5

BLOSUM_threshold = 20
def adv_seq_gen(indicies_to_switch, clean_sequence):
    """

    :param indicies_to_switch: the indices to change randomly from the clean sequence
    :param clean_sequence:
    :return: adv_sequence and BLOSUm_distance
    """
    mapper = ["A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y"]

    def lists_Diff(li1, li2):
        return list(set(li1) - set(li2)) + list(set(li2) - set(li1))

    residues_list_to_switch = list(clean_sequence[indicies_to_switch[0]:indicies_to_switch[-1]+1])
    indices_to_switch = indicies_to_switch


    # for each residue in the list_to_change, get a list of all possibilities
    ### get a sequence by replacing each residue in the residues_list_to_switch by a randomn choice residue from the possible choices
    Adv_seq_list = []
    cntr = 0

    for index in range(len(clean_sequence)):
        #random.seed(seed_id+index)
        if index in indices_to_switch:
            Adv_seq_list.append(random.choice(lists_Diff(mapper, [residues_list_to_switch[cntr]])))
            cntr = cntr + 1
        else:
            Adv_seq_list.append(clean_sequence[index])

    BLOSUm_distance = BLOSUM62_distance_score(clean_sequence, Adv_seq_list)

    return Adv_seq_list, BLOSUm_distance


########## The over all algorithm works as follows:
### Move every HAMMING_threshod (5 residues) starting from the beginning. For every 5 residues to change, run the  adv_seq_gen fucntion number of times (iterations_per_fixed_switch_indicies)
### for each time, if the blosum distnace is less than or equal 40, save the sequence



iterations_per_fixed_switch_indicies = 1000

saving_counter = 0

for ii in range(500):

    # at each ii, shift the list of 5 residues by one. The 5 is from HAMMING_threshod = 5
    indicies_to_switch = list(range(ii,ii+HAMMING_threshod))

    print("switch indices = ", indicies_to_switch, "at i = ", [ii])
    # For each list of residues to switch, choose randomly a nujmber fo times equal to iterations_per_fixed_switch_indicies
    for iter in range(iterations_per_fixed_switch_indicies):
        adv_seq_list, D_blosum = adv_seq_gen(indicies_to_switch, SEQUENCE)
        if D_blosum <= BLOSUM_threshold:
            # save the sequence
            print('counter = ',[saving_counter],"WE ARE SAVING THIS Adv Seq: ", ["".join(adv_seq_list) ], "is of ", [D_blosum] )
            saving_counter = saving_counter + 1
            text_file.write("".join(adv_seq_list)+ " "+ str(D_blosum) +"\n")
        #print("Adv Seq: ", [adv_seq_list], "is of ", [D_blosum] )

        # if saving counter is more than 20, break and exit
        if saving_counter == 20:
            print('WE HAVE ENOUGH!!! - WE ARE BREAKING')
            break_variable = True
            break
        else:
            break_variable = False

    if break_variable:
        break


text_file.close()




print("break")